@page "/summary"
@attribute [Authorize]
@inject IJSRuntime _jsRuntime
@inject IOrderService _orderService
@inject IProductService _productService
@inject IPaymentService _paymentService
@inject ILocalStorageService _localStorage

@if (IsProcessing)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif" />
    </div>
}
else
{
    <div class="mt-4 mx-4 px-md-5 mx-md-5 p-1">
        <div class="row p-2 my-3">
            <div class="col-12 col-lg-7 p-4">
                <div class="row px-2" style="color: #EC407A">
                    <div class="col-8 py-1">
                        <MudText Typo="Typo.h5">Order Summary</MudText>
                    </div>
                    <div class="col-4 p-0" style="text-align:right; margin-bottom: 20px">
                        <MudButton Href="@($"{SD.PAGE_CLIENT}/cart")" Color="Color.Warning" Variant="Variant.Filled" Class="btn-block">Back to cart</MudButton>
                    </div>
                </div>
                @foreach (var prod in Order.OrderDetails)
                {
                    <div class="row border p-1 m-1">
                        <div class="col-3 col-md-2 ">
                            <img src="@prod.Product.ImageUrl" width="100%">
                        </div>
                        <div class="col-5 col-md-5 ">
                            <span class="">Product : @prod.ProductName </span><br />
                            <span class="pt-1">Size : @prod.Size</span><br />
                            <span class="pt-1">Count : @prod.Count</span><br />
                        </div>
                        <div class="col-4 col-md-5 " style="text-align:right;">
                            <h4 class="text-warning font-weight-bold pt-2">
                                USD
                                <span>@((prod.Count * prod.Price).ToString("c"))</span>
                            </h4>
                        </div>
                    </div>
                }
                <div class="row" style="text-align:right; color: #EC407A; margin-top: 20px">
                    <div class="col-12 px-3">
                        <h3> Order Total : <span class="text-secondary">$@Order.OrderHeader.OrderTotal.ToString()</span> </h3>
                    </div>
                </div>
            </div>
            <div class="col-12 col-lg-5 p-4 ml-4 ml-md-0 mt-4 mt-md-0 border">
                <EditForm Model="Order.OrderHeader" OnValidSubmit="HandleCheckout">
                    <DataAnnotationsValidator />
                    <div class="row px-2 text-success border-bottom">
                        <div class="col-7 py-1">
                            <p style="font-size: x-large ;margin:0px; color: #EC407A;">Enter Details</p>
                        </div>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Name</label>
                        <InputText @bind-Value="Order.OrderHeader.Name" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.Name"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Phone</label>
                        <InputText @bind-Value="Order.OrderHeader.PhoneNumber" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.PhoneNumber"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Email</label>
                        <InputText @bind-Value="Order.OrderHeader.Email" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.Email"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Street Address</label>
                        <InputText @bind-Value="Order.OrderHeader.StreetAddress" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.StreetAddress"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">City</label>
                        <select @bind="Order.OrderHeader.City" class="form-control">
                            <option value="" disabled selected>Select City*</option>
                            @foreach (var province in Provinces)
                            {
                                <option value="@province">@province</option>
                            }
                        </select>
                        <ValidationMessage For="()=>Order.OrderHeader.City"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">State</label>
                        <InputText @bind-Value="Order.OrderHeader.State" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.State"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Postal Code</label>
                        <InputText @bind-Value="Order.OrderHeader.PostalCode" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.PostalCode"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <MudButton ButtonType="ButtonType.Submit" Color="Color.Secondary" Variant="Variant.Filled" Class="form-control" Style="margin-top: 10px">Checkout Now</MudButton>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    public bool IsProcessing { get; set; } = false;
    private OrderDTO Order { get; set; } = null;
    private IEnumerable<ProductDTO> Products { get; set; }
    private List<string> Provinces = new List<string>
    {
        "กรุงเทพมหานคร",
        "กระบี่",
        "กาญจนบุรี",
        "กาฬสินธุ์",
        "กำแพงเพชร",
        "ขอนแก่น",
        "จันทบุรี",
        "ฉะเชิงเทรา",
        "ชลบุรี",
        "ชัยนาท",
        "ชัยภูมิ",
        "ชุมพร",
        "เชียงราย",
        "เชียงใหม่",
        "ตรัง",
        "ตราด",
        "ตาก",
        "นครนายก",
        "นครปฐม",
        "นครพนม",
        "นครราชสีมา",
        "นครศรีธรรมราช",
        "นครสวรรค์",
        "นนทบุรี",
        "นราธิวาส",
        "น่าน",
        "บึงกาฬ",
        "บุรีรัมย์",
        "ปทุมธานี",
        "ประจวบคีรีขันธ์",
        "ปราจีนบุรี",
        "ปัตตานี",
        "พระนครศรีอยุธยา",
        "พังงา",
        "พัทลุง",
        "พิจิตร",
        "พิษณุโลก",
        "เพชรบุรี",
        "เพชรบูรณ์",
        "แพร่",
        "พะเยา",
        "ภูเก็ต",
        "มหาสารคาม",
        "มุกดาหาร",
        "แม่ฮ่องสอน",
        "ยโสธร",
        "ยะลา",
        "ร้อยเอ็ด",
        "ระนอง",
        "ระยอง",
        "ราชบุรี",
        "ลพบุรี",
        "ลำปาง",
        "ลำพูน",
        "เลย",
        "ศรีสะเกษ",
        "สกลนคร",
        "สงขลา",
        "สตูล",
        "สมุทรปราการ",
        "สมุทรสงคราม",
        "สมุทรสาคร",
        "สระแก้ว",
        "สระบุรี",
        "สิงห์บุรี",
        "สุโขทัย",
        "สุพรรณบุรี",
        "สุราษฎร์ธานี",
        "สุรินทร์",
        "หนองคาย",
        "หนองบัวลำภู",
        "อ่างทอง",
        "อำนาจเจริญ",
        "อุดรธานี",
        "อุตรดิตถ์",
        "อุทัยธานี",
        "อุบลราชธานี"
    };

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        List<ShoppingCart> cart = await _localStorage.GetItemAsync<List<ShoppingCart>>(SD.ShoppingCart);
        Products = await _productService.GetAll();
        Order = new()
        {
            OrderHeader = new()
            {
                OrderTotal = 0,
                Status = SD.Status_Pending
            },
            OrderDetails = new List<OrderDetailDTO>()
        };
        foreach (var item in cart)
        {
            ProductDTO product = Products.FirstOrDefault(u => u.Id == item.ProductId);
            ProductPriceDTO productPrice = product.ProductPrices.FirstOrDefault(u => u.Id == item.ProductPriceId);
            OrderDetailDTO orderDetailDTO = new()
                {
                    ProductId = item.ProductId,
                    Size = productPrice.Size,
                    Count = item.Count,
                    Price = productPrice.Price,
                    ProductName = product.Name,
                    Product = product
                };
            Order.OrderDetails.Add(orderDetailDTO);
            Order.OrderHeader.OrderTotal += (orderDetailDTO.Count * orderDetailDTO.Price);
        }
        if (await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails) != null)
        {
            var userInfo = await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails);
            Order.OrderHeader.UserId = userInfo.Id;
            Order.OrderHeader.Name = userInfo.Name;
            Order.OrderHeader.Email = userInfo.Email;
            Order.OrderHeader.PhoneNumber = userInfo.PhoneNumber;
        }
        IsProcessing = false;
    }
    private async Task HandleCheckout()
    {
        try
        {
            IsProcessing = true;
            var paymentDto = new StripePaymentDTO()
            {
                Order = Order
            };
            var result = await _paymentService.Checkout(paymentDto);
            Order.OrderHeader.SessionId = result.Data.ToString();
            var orderDTOSaved = await _orderService.Create(paymentDto);
            await _localStorage.SetItemAsync(SD.Local_OrderDetails, orderDTOSaved);
            await _jsRuntime.InvokeVoidAsync("redirectToCheckout", result.Data.ToString());
            await _jsRuntime.ToastrSuccess("บันทึกสำเร็จ");
        }
        catch (Exception e)
        {
            await _jsRuntime.ToastrError(e.Message);
        }
    }
}