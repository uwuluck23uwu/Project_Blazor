@page "/product/price/{Id:int}"
@inject IProductRepository _productRepository
@inject IProductPriceRepository _productPriceRepository
@attribute [Authorize(Roles = SD.Role_Admin)]

<ToastMudComponent Open="@Open" Message="@Message" Alert="@Alert" Toggle="@(()=>{Open = false; Alert = ""; Message = "";})" />
@if (IsLoading)
{
    <div class="container1">
        <div class="spinner"></div>
    </div>
}
else
{
    <MudContainer Class="mt-4 mb-4 ml-0">
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h4">Product Price</MudText>
            </MudItem>
        </MudGrid>
    </MudContainer>
    <MudCard>
        <MudCardContent>
            <MudGrid Class="pl-3 pr-3">
                <MudItem xs="12" md="10">
                    <MudText Typo="Typo.h5">@Product.Name</MudText>
                    <MudText Typo="Typo.subtitle1">Category : @Product.Category.Name</MudText>
                    <MudText Typo="Typo.subtitle1">Description : @((MarkupString)Product.Description)</MudText>
                </MudItem>
                <MudItem xs="12" md="2" Class="d-flex justify-content-center align-items-center">
                    <MudImage Src="@($"{SD.PAGE_SERVER}/images/product/{Product.ImageUrl}")" Width="150" Class="rounded-lg" />
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
    <SfGrid DataSource="@ProductPrices" AllowPaging="true" AllowFiltering="true" AllowSorting="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })" @ref="productPriceGrid">
        <GridEvents OnActionBegin="ActionBeginHandler" TValue="ProductPriceDTO"></GridEvents>
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
        <GridEditSettings AllowAdding="true" AllowEditing="true" ShowDeleteConfirmDialog="true" AllowDeleting="true"></GridEditSettings>
        <GridPageSettings PageSize="5" PageCount="5" PageSizes="true"></GridPageSettings>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridSortSettings AllowUnsort="false">
            <GridSortColumns>
                <GridSortColumn Field="Price" Direction="Syncfusion.Blazor.Grids.SortDirection.Ascending"></GridSortColumn>
            </GridSortColumns>
        </GridSortSettings>
        <GridColumns>
            <GridColumn IsPrimaryKey="true" AllowAdding="false" Field=@nameof(ProductPriceDTO.Id) HeaderText="ID" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="120"></GridColumn>
            <GridColumn Field=@nameof(ProductPriceDTO.Size) HeaderText="Size">
                <EditTemplate>
                    <Syncfusion.Blazor.DropDowns.SfDropDownList DataSource="SizeList" TItem="string" TValue="string" @bind-Value="((context as ProductPriceDTO).Size)"></Syncfusion.Blazor.DropDowns.SfDropDownList>
                </EditTemplate>
            </GridColumn>
            <GridColumn ValidationRules="@(new ValidationRules{ Required = true, Min = 0})" Field=@nameof(ProductPriceDTO.Price) HeaderText="Price" Format="C2"></GridColumn>
            <GridColumn HeaderText="Manage Records" Width="150">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-edit", CssClass="e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-save", CssClass="e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-cancel-icon", CssClass="e-flat" })"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private bool IsLoading { get; set; } = true;
    public SfGrid<ProductPriceDTO> productPriceGrid;
    private ProductDTO Product { get; set; } = new();
    private IEnumerable<ProductPriceDTO> ProductPrices { get; set; } = new List<ProductPriceDTO>();
    IEnumerable<String> SizeList = new List<String>()
    {
        "Small","Medium","Large"
    };
    public bool Open { get; set; }
    public string? Alert { get; set; }
    public string? Message { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoading = true;
            StateHasChanged();
            Product = await _productRepository.Get(Id);
            ProductPrices = await _productPriceRepository.GetAll(Id);
            IsLoading = false;
            StateHasChanged();
        }
    }
    public async void ActionBeginHandler(ActionEventArgs<ProductPriceDTO> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            args.Data.ProductId = Id;
            if (args.Action == "Add")
            {
                Open = true;
                Alert = "Success";
                Message = "สร้างรายละเอียดผลิตภัณฑ์สำเร็จแล้ว";
                await _productPriceRepository.Create(args.Data);
                ProductPrices = await _productPriceRepository.GetAll(Id);
                await productPriceGrid.Refresh();
            }
            if (args.Action == "Edit")
            {
                Open = true;
                Alert = "Success";
                Message = "อัปเดตรายละเอียดผลิตภัณฑ์สำเร็จแล้ว";
                await _productPriceRepository.Update(args.Data);
            }
        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await _productPriceRepository.Delete(args.Data.Id);
            await productPriceGrid.Refresh();
        }
    }
}