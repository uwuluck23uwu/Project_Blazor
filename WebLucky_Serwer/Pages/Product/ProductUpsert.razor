@page "/product/create"
@page "/product/edit/{Id:int}"
@inject IFileUpload _fu
@inject IProductRepository _pr
@inject ICategoryRepository _cr
@inject NavigationManager _nm
@attribute [Authorize]

<ToastMudComponent Open="@Open" Message="@Message" Toggle="@(()=>{Open = false; Message = "";})" />
<div class="row m-2">
    <div class="col-md-10 p-1">
        <EditForm Model="Product" OnValidSubmit="UpsertProduct">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label class="form-label">Name</label>
                <InputText class="form-control" @bind-Value="Product.Name" />
                <ValidationMessage For="() => Product.Name" />
            </div>
            <div class="mb-3">
                <label class="form-label">Color</label>
                <InputText class="form-control" @bind-Value="Product.Color" />
                <ValidationMessage For="() => Product.Color" />
            </div>
            <div class="mb-3">
                <label class="form-label">Description</label>
                <SfRichTextEditor class="form-control" @bind-Value="Product.Description" />
                <ValidationMessage For="() => Product.Description" />
            </div>
            <div class="row pt-3">
                <div class="btn-group col-6">
                    <div class="form-check">
                        <InputCheckbox @bind-Value="Product.ShopFavorites" class="form-check-input" />
                        <label class="form-check-label">Is Shop Favorites</label>
                    </div>
                </div>
                <div class="btn-group col-6">
                    <div class="form-check">
                        <InputCheckbox @bind-Value="Product.CustomerFavorites" class="form-check-input" />
                        <label class="form-check-label">Is Customer Favorites</label>
                    </div>
                </div>
                <div class="form-group col-6">
                    <label>Category</label>
                    <InputSelect @bind-Value="Product.CategoryId" class="form-select">
                        <option value="0" disabled="disabled" selected>--Select Category--</option>
                        @foreach (var cat in Categories)
                        {
                            <option value="@cat.Id">@cat.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="()=>Product.CategoryId"></ValidationMessage>
                </div>
                <div class="form-group col-6">
                    <InputFile OnChange="HandleImageUpload" />
                </div>
            </div>

            <button type="submit" class="btn @(Title == "Create" ? "btn-primary" : "btn-danger")">@Title</button>
            <NavLink href="product" class="btn btn-secondary">Back to Product</NavLink>
        </EditForm>
    </div>
    <div class="col-md-2 p-1">
        <img src="@Product.ImageUrl" class="w-100 rounded-3">
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private int Count;
    public bool Open { get; set; }
    public string? Message { get; set; }
    public string OldImageUrl { get; set; }
    public IBrowserFile FileImage { get; set; }

    private string Title { get; set; } = "Create";
    private ProductDTO Product { get; set; } = new ProductDTO();
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();

    protected override async Task OnInitializedAsync()
    {
        Categories = await _cr.GetAll();
        if (Id != 0)
        {
            Title = "Update";
            Product = await _pr.Get(Id);
            OldImageUrl = Product.ImageUrl;
        }
    }
    private async Task UpsertProduct()
    {
        if (FileImage is not null)
        {
            Product.ImageUrl = await _fu.UploadFile(FileImage);
        }
        if (Id == 0) 
        {
            Open = true;
            Message = "Product created successfully.";
            await _pr.Create(Product); 
        }
        else 
        {
            if (OldImageUrl != Product.ImageUrl)
            {
                _fu.DeleteFile(OldImageUrl);
            }
            Open = true;
            Message = "Product updated successfully.";
            await _pr.Update(Product);
        }
        _nm.NavigateTo("product");
    }
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var imagefiletypes = new List<string>() { ".png", ".jpg", ".jpeg" };
        try
        {
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    var extensionname = Path.GetExtension(file.Name).ToLower();
                    if (imagefiletypes.Contains(extensionname))
                    {
                        FileImage = file;
                        using Stream imageStream = file.OpenReadStream(1024 * 1024 * 10);
                        using MemoryStream ms = new();
                        await imageStream.CopyToAsync(ms);
                        Product.ImageUrl = $"data:image/png;base64,{Convert.ToBase64String(ms.ToArray())}";
                    }
                    else
                    {
                        Open = true;
                        Message = "Please select .jpg/.jpeg/.png file only";
                        return;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Open = true;
            Message = ex.Message;
        }
    }
}
