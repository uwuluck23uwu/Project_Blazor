@page "/product/create"
@page "/product/edit/{Id:int}"
@inject IFileUpload _fu
@inject IProductRepository _pr
@inject ICategoryRepository _cr
@inject NavigationManager _nm
@attribute [Authorize(Roles = SD.Role_Admin)]

<ToastMudComponent Open="@Open" Message="@Message" Alert="@Alert" Toggle="@(()=>{Open = false; Message = "";})" />
<MudContainer Fixed="true">
    <MudText Typo="Typo.h4" Style="margin-top: 2%; margin-left: 4%;">
        Product | @(Title == "Create" ? "Create" : "Update")
    </MudText>
    <EditForm Model="@Product" OnValidSubmit="UpsertProduct">
        <DataAnnotationsValidator />
        <MudGrid Style="margin-top: 2%;">
            <MudItem xs="12" md="7">
                <MudCard Class="pa-4">
                    <MudCardContent>
                        <MudTextField Label="Name" Required="true" RequiredError="โปรดป้อนข้อมูล!" @bind-Value="Product.Name" />
                        <ValidationMessage For="()=>Product.Name"></ValidationMessage>
                        <MudTextField Label="Color" Required="true" RequiredError="โปรดป้อนข้อมูล!" @bind-Value="Product.Color" />
                        <MudTextField Label="Description" Required="true" RequiredError="โปรดป้อนข้อมูล!" @bind-Value="Product.Description" />
                        <ValidationMessage For="()=>Product.Description"></ValidationMessage>
                        <MudSelect T="int" Label="Category" AnchorOrigin="Origin.BottomCenter" Style="margin-top: 20px" @bind-Value="Product.CategoryId">
                            <MudSelectItem Value="0" Disabled="true">Select Category*</MudSelectItem>
                            @foreach (var cat in Categories)
                            {
                                <MudSelectItem Value="cat.Id">@cat.Name</MudSelectItem>
                            }
                        </MudSelect>
                        <ValidationMessage For="()=>Product.CategoryId"></ValidationMessage>
                        <MudFileUpload T="IBrowserFile" OnFilesChanged="HandleImageUpload" Style="margin-top: 50px; margin-bottom: 30px;">
                            <ButtonTemplate Context="item">
                                <MudFab HtmlTag="label" Color="@(Title == "Create" ? Color.Secondary : Color.Tertiary)" Icon="@Icons.Material.Filled.Image" Label="Load picture" for="@item.Id" />
                            </ButtonTemplate>
                        </MudFileUpload>
                        <MudCardActions Class="d-flex align-center justify-space-between">
                            <MudItem>
                                <MudCheckBox T="bool" Required="false" Label="Is Shop Favorites" @bind-Value="Product.ShopFavorites" />
                                <MudCheckBox T="bool" Required="false" Label="Is Customer Favorites" @bind-Value="Product.CustomerFavorites" />
                            </MudItem>
                            <MudItem>
                                <MudButton Color="@(Title == "Create" ? Color.Secondary : Color.Tertiary)" Variant="MudBlazor.Variant.Filled" Size="Size.Large" Class="ml-auto" ButtonType="MudBlazor.ButtonType.Submit">@(Title == "Create" ? "Create" : "Update")</MudButton>
                                <MudButton Color="Color.Warning" Variant="MudBlazor.Variant.Filled" Size="Size.Large" Href="product" Style="margin-left: 10px;">Back</MudButton>
                            </MudItem>
                        </MudCardActions>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudPaper Class="pa-4 mud-height-full d-flex flex-column align-items-center">
                    <MudText Typo="Typo.h4">Image</MudText>
                    <MudImage Src="@Product.ImageUrl" Width="200" Alt="Product Image" Elevation="25" Class="rounded-lg ma-8" />
                </MudPaper> 
            </MudItem>
        </MudGrid>
    </EditForm>
</MudContainer>

@code {
    [Parameter]
    public int Id { get; set; }
    private int Count;
    public bool Open { get; set; }
    public string? Alert { get; set; }
    public string? Message { get; set; }
    public string OldImageUrl { get; set; }
    public IBrowserFile FileImage { get; set; }
    private string Title { get; set; } = "Create";
    private ProductDTO Product { get; set; } = new() { ImageUrl = $"{SD.PAGE_SERVER}/default.png" };
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();

    protected override async Task OnInitializedAsync()
    {
        Categories = await _cr.GetAll();
        if (Id != 0)
        {
            Title = "Update";
            Product = await _pr.Get(Id);
            OldImageUrl = Product.ImageUrl;
            Product.ImageUrl = SD.PAGE_SERVER + SD.PRODUCTIMG + "/" + Product.ImageUrl;
        }
    }
    private async Task UpsertProduct()
    {
        if (FileImage is not null)
        {
            Product.ImageUrl = await _fu.UploadFile(FileImage);
        }
        if (Id == 0)
        {
            Open = true;
            Alert = "Success";
            Message = "สร้างผลิตภัณฑ์สำเร็จแล้ว";
            await _pr.Create(Product);
        }
        else
        {
            if (OldImageUrl != Product.ImageUrl)
            {
                _fu.DeleteFile(OldImageUrl);
            }
            Open = true;
            Alert = "Success";
            Message = "อัปเดตผลิตภัณฑ์เรียบร้อยแล้ว";
            await _pr.Update(Product);
        }
        _nm.NavigateTo("product");
    }
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var imagefiletypes = new List<string>() { ".png", ".jpg", ".jpeg" };
        try
        {
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    var extensionname = Path.GetExtension(file.Name).ToLower();
                    if (imagefiletypes.Contains(extensionname))
                    {
                        FileImage = file;
                        using Stream imageStream = file.OpenReadStream(1024 * 1024 * 10);
                        using MemoryStream ms = new();
                        await imageStream.CopyToAsync(ms);
                        Product.ImageUrl = $"data:image/png;base64,{Convert.ToBase64String(ms.ToArray())}";
                    }
                    else
                    {
                        Open = true;
                        Alert = "Warning";
                        Message = "กรุณาเลือกไฟล์ .jpg/.jpeg/.png เท่านั้น";
                        return;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Open = true;
            Alert = "Error";
            Message = ex.Message;
        }
    }
}
