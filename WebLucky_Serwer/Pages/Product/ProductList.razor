@page "/product"
@inject IProductRepository _pr

@if (Products.Any())
{ 
    <div class="row m-2">
    <div class="col-6">
        <h4 class="card-title text-primary">Product List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="product/create" class="btn btn-primary form-control">Add New Product </a>
    </div>
    <div>
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Shop Favorites</th>
                    <th>Customer Favorites</th>
                    <th>Category</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Products)
                {
                    <tr>
                        <th>@item.Name</th>
                        <th>@item.ShopFavorites</th>
                        <th>@item.CustomerFavorites</th>
                        <th>@item.Category</th>
                        <th>
                            <NavLink class="btn-primary btn">Edit</NavLink>
                            <_DeleteConfirmation />
                        </th>
                    </tr>
                }
            </tbody>

        </table>
    </div>
</div>
}
else
{
    if (IsLoading)
    {
        <div class="text-center offset-6">
            <div class="spinner">
                <div> </div>
                <div> </div>
                <div> </div>
                <div> </div>
                <div> </div>
                <div> </div>
                <div> </div>
                <div> </div>
                <div> </div>
                <div> </div>
            </div>
        </div>
    }
    else
    {
        <p>No records found.</p>
    }
}

@code {
    private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    public bool IsLoading { get; set; } = true;
    public int deleteId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1000);
            await LoadProducts();
        }
    }
    private async Task LoadProducts()
    {
        IsLoading = true;
        StateHasChanged();
        Products = await _pr.GetAll();
        IsLoading = false;
        StateHasChanged();
    }
    public async Task DeleteConfirm(int deleteId)
    {
        if (deleteId != 0)
        {
            await _pr.Delete(deleteId);
            await LoadProducts();
        }
    }
}
