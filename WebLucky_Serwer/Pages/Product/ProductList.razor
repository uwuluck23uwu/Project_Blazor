@page "/product"
@inject IFileUpload _fu
@inject IProductRepository _pr

<ToastMudComponent Open="@Open" Message="@Message" Toggle="@Toggle" />
@if (Products.Any())
{ 
    <div class="row m-2">
        <div class="col-6">
            <h4 class="card-title text-primary">Product List</h4>
        </div>
        <div class="col-4 offset-2">
            <a href="product/create" class="btn btn-primary form-control">Add New Product </a>
        </div>
        <div>
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Shop Favorites</th>
                        <th>Customer Favorites</th>
                        <th>Category</th>
                        <th>ImageUrl</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Products)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <th>
                                <input type="checkbox" disabled checked="@item.ShopFavorites">
                            </th>
                            <th>
                                <input type="checkbox" disabled checked="@item.CustomerFavorites">
                            </th>
                            <th>
                                @item.Category.Name
                            </th>
                            <th>
                            @if (!String.IsNullOrEmpty(item.ImageUrl)) { <img src="@item.ImageUrl" width="100px" /> }
                            </th>
                            <td>
                                <NavLink href="@($"product/edit/{item.Id}")" class="btn-primary btn">Edit</NavLink>
                                <NavLink href="@($"product/price/{item.Id}")" class="btn-success btn">Price</NavLink>
                                <_DeleteConfirmation OnDeleteConfirm="@(()=>DeleteConfirm(item.Id))" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}
else
{
    if (IsLoading)
    {
        <div class="text-center offset-6">
            <div class="spinner">
                <div> </div>
                <div> </div>
                <div> </div>
                <div> </div>
                <div> </div>
                <div> </div>
                <div> </div>
                <div> </div>
                <div> </div>
                <div> </div>
            </div>
        </div>
    }
    else
    {
        <p>No records found.</p>
    }
}

@code {
    public bool Open { get; set; }
    public int deleteId { get; set; }
    public string? Message { get; set; }
    public bool IsLoading { get; set; } = true;

    private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1000);
            await LoadProducts();
        }
    }
    private async Task LoadProducts()
    {
        IsLoading = true;
        StateHasChanged();
        Products = await _pr.GetAll();
        IsLoading = false;
        StateHasChanged();
    }
    public async Task DeleteConfirm(int deleteId)
    {
        if (deleteId != 0)
        {
            ProductDTO product = await _pr.Get(deleteId);
            Open = true;
            Message = "ลบสำเร็จ";
            _fu.DeleteFile(product.ImageUrl);
            await _pr.Delete(deleteId);
            await LoadProducts();
        }
    }
    public void Toggle()
    {
        Open = false;
        Message = "";
    }
}
