@page "/category"
@inject ICategoryRepository _cr
@* @inject IJSRuntime _js *@
@attribute [Authorize]

@* <_DeleteConfirmation OnDeleteConfirm="@DeleteConfirm" /> *@
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Category List [@Categories.ToList().Count]</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-primary form-control">Add New Category </a>
    </div>
    @if (Categories.Any())
    {
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Categories)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>
                            <NavLink href=@($"/category/edit/{item.Id}") class="btn-primary btn">Edit</NavLink>
                            <_DeleteConfirmation OnDeleteConfirm="@(()=>DeleteConfirm(item.Id))" />
                            @* <button @onclick="()=>ShowConfirm(item.Id)" class="btn-success btn">Delete</button> *@
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        if (IsLoading)
        {
            <div class="text-center offset-6">
                <div class="spinner">
                    <div> </div>
                    <div> </div>
                    <div> </div>
                    <div> </div>
                    <div> </div>
                    <div> </div>
                    <div> </div>
                    <div> </div>
                    <div> </div>
                    <div> </div>
                </div>
            </div>
        }
        else
        {
            <p>No records found.</p>
        }
    }
</div>

@code {
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    public bool IsLoading { get; set; } = true;
    public int deleteId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1000);
            await LoadCategories();
        }
    }
    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _cr.GetAll();
        IsLoading = false;
        StateHasChanged();
    }
    // private async Task ShowConfirm(int id)
    // {
    //     deleteId = id;
    //     await _js.InvokeVoidAsync("ShowDeleteConfirmationModal");
    // }
    public async Task DeleteConfirm(int deleteId)
    {
        if (deleteId != 0)
        {
            await _cr.Delete(deleteId);
            await LoadCategories();
        }
        //await _js.InvokeVoidAsync("HideDeleteConfirmationModal");
    }
}