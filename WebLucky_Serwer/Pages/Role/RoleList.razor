@page "/role"
@inject IRoleService roleService
@attribute [Authorize(Roles = SD.Role_Admin)]

<ToastMudComponent Open="@Open" Message="@Message" Alert="@Alert" Toggle="@(()=>{Open = false; Alert = ""; Message = "";})" />
@if (IsLoading)
{
    <div class="container1">
        <div class="spinner"></div>
    </div>
}
else
{
    <MudGrid Class="mt-4 mb-4 ml-2">
        <MudItem xs="12">
            <MudText Typo="Typo.h4">
                Role
                <MudAvatar Variant="MudBlazor.Variant.Outlined">@Roles.ToList().Count</MudAvatar>
            </MudText>
        </MudItem>
    </MudGrid>
    <SfGrid @ref="roleGrid" DataSource="@Roles" AllowPaging="true" AllowFiltering="true" AllowSorting="true" Toolbar="@(new List<string>{"Add","Edit","Update","Delete","Cancel"})">
        <GridEvents OnActionBegin="ActionHandler" TValue="RoleDTO"></GridEvents>
        <GridEditSettings AllowAdding="true" AllowEditing="true" ShowDeleteConfirmDialog="true" AllowDeleting="true"></GridEditSettings>
        <GridPageSettings PageSize="5" PageCount="5" PageSizes="true"></GridPageSettings>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridColumns>
            <GridColumn IsPrimaryKey="true" AllowAdding="false" Field=@nameof(RoleDTO.Id) HeaderText="ID"></GridColumn>
            <GridColumn Field=@nameof(RoleDTO.Name) HeaderText="Name"></GridColumn>
            <GridColumn HeaderText="Manage Records" Width="150">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-edit", CssClass="e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-save", CssClass="e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-cancel-icon", CssClass="e-flat" })"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}

@code {
    public bool Open { get; set; }
    public string? Alert { get; set; }
    public string? Message { get; set; }
    private bool IsLoading { get; set; } = true;
    public SfGrid<RoleDTO> roleGrid;
    private IEnumerable<RoleDTO> Roles { get; set; } = new List<RoleDTO>();

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        StateHasChanged();
        Roles = await roleService.GetAll();
        IsLoading = false;
        StateHasChanged();
    }
    public async void ActionHandler(ActionEventArgs<RoleDTO> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                Open = true;
                Alert = "Success";
                Message = "สร้างบทบาทสำเร็จแล้ว";
                await roleService.Add(args.Data);
                Roles = await roleService.GetAll();
                await roleGrid.Refresh();
            }
            if (args.Action == "Edit")
            {
                Open = true;
                Alert = "Success";
                Message = "อัปเดตบทบาทสำเร็จแล้ว";
                var result = await roleService.Update(args.Data);
                if (!result)
                {
                    Roles = await roleService.GetAll();
                    await roleGrid.Refresh();
                }
            }
        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            Open = true;
            Alert = "Success";
            Message = "ลบสำเร็จ";
            await roleService.Delete(args.Data);
            await roleGrid.Refresh();
        }
    }
}